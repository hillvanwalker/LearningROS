-----------minimal publisher-----------
roscore
rosrun minimal_nodes minimal_publisher
rostopic info topic1
rosmsg show std_msgs/Float64
rostopic echo topic1
rostopic hz topic1

-----------sleepy_minimal_publisher-----------
rosrun minimal_nodes sleepy_minimal_publisher
rostopic echo topic1
rostopic hz topic1

-----------minimal_subscriber-----------
rosrun minimal_nodes minimal_subscriber
rostopic pub -r 1 topic1 std_msgs/Float64 1.23
rosnode list
rosnode info minimal_subscriber
rqt_graph

-----------launch file-----------
roslaunch rosclass_minimal_nodes minimal_nodes.launch
rqt_console

-----------minimal simulator-----------
rosrun minimal_nodes minimal_simulator
rostopic pub -r 10 force_cmd std_msgs/Float64 0.1 
rqt_plot
rosrun minimal_nodes minimal_controller
rostopic pub -r 10 vel_cmd std_msgs/Float64 1.0

--------------------------------------------
--------------------------------------------

-----------custom messages-----------
example_ros_msg/msg/ExampleMessage.msg
rosmsg show  example_ros_msg/ExampleMessage

rosrun example_ros_msg example_ros_message_publisher
rostopic echo example_topic

-----------example_ros_service-----------
example_ros_service/src:
    example_ros_service.cpp
    example_ros_client.cpp
example_ros_service/srv:
    ExampleServiceMsg.srv

rosrun example_ros_service example_ros_service
rosservice list
rosservice info
rosservice call lookup_by_name 'Ted'
rosrun example_ros_service example_ros_client 

--------------------------------------------
--------------------------------------------
classes: see example_ros_class (pass in node handle; odd syntax for callbacks)

rosrun example_ros_class example_ros_class
rosservice call example_minimal_service 
rostopic pub -r 2 example_class_input_topic std_msgs/Float32 2.0

*main using a library:
rosrun creating_a_ros_library example_ros_class_test_main
(then test, as above)

libraries: creating_a_ros_library; 
note CMakeLists.txt for adding a library
where to put header file (then use <pkg/header_name.h>)
  *the parameter server
  *creating packages and libraries

action servers: in ros_class dir, create pkg:
cs_create_pkg example_action_server roscpp actionlib
open and save under .../ros_class/example_action_server/action/demo.action
open and save under .../ros_class/example_action_server/src/example_action_server.cpp
open and save under .../ros_class/example_action_server/src/example_action_client.cpp
edit package.xml; uncomment:
 <build_depend>message_generation</build_depend>
  <run_depend>message_runtime</run_depend> 
CMakeLists.txt: 
uncomment:
find_package(Boost REQUIRED COMPONENTS system thread)
add:
cs_add_executable(example_action_server src/example_action_server.cpp)
cs_add_executable(example_action_client src/example_action_client.cpp)
catkin_make

rosrun example_action_server example_action_server
rosrun example_action_server example_action_client

rosrun example_action_server example_countdown_server
rosrun example_action_server timer_client

Parameter server:
rosparam
rosparam set /gains "p: 1.0
i : 2.0
d : 3.0"
rosparam list
rosparam get /gains
from .../learning_ros/Part_1/example_parameter_server/launch:
rosparam load jnt1_gains.yaml
rosparam list
rosparam get jnt1_gains
rosparam delete jnt1_gains
rosparam list
(launch file option--would need to copy over package/directory)
example read_param_from_node: uses: if ( nh.getParam ("/joint1_gains/p", P_gain))


